{"version":3,"sources":["ReactotronConfig.js","redux/actions/type.js","redux/reducers/UserReducer.js","redux/reducers/index.js","redux/sagas/NetworkSaga.js","redux/sagas/index.js","redux/store/index.js","screens/UserScreen.js","screens/HomeScreen.js","navigation/AppNavigator.js","App.js","serviceWorker.js","index.js","navigation/NavigationUtil.js"],"names":["reactotron","Reactotron","configure","name","use","reactotronRedux","sagaPlugin","connect","GET_USER","initialState","data","isLoading","error","appReducer","combineReducers","userReducer","state","action","type","payload","getUserInfor","call","response","put","watchGetUser","takeEvery","rootSaga","sagaMonitor","createSagaMonitor","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","store","createStore","applyMiddleware","createEnhancer","run","UserScreen","TouchableOpacity","onPress","NavigationUtil","goBack","children","Text","Component","HomeScreen","navigation","AppNavigator","ref","setHistory","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","_history","getHistory","module","exports","history","route","push"],"mappings":"2JAQeA,EALIC,IAAWC,UAAU,CAAEC,KAAM,aAC7CC,IAAIC,6BACJD,IAAIE,OACJC,U,yDCHUC,EAAW,mBCDlBC,EAAe,CACnBC,KAAM,GACNC,WAAW,EACXC,MAAO,MCALC,EAAYC,0BAAgB,CAC9BC,YDEa,WAAwC,IAA/BC,EAA8B,uDAAtBP,EAAcQ,EAAQ,uCACpD,OAAQA,EAAOC,MACb,KAAKV,EACH,OAAO,eAAKQ,EAAZ,CAAmBL,WAAW,IAEhC,IDT4B,yBCU1B,OAAO,eACFK,EADL,CAEEL,WAAW,EACXC,MAAO,KACPF,KAAMO,EAAOE,UAGjB,IDhByB,uBCkBvB,OAAO,eACFH,EADL,CAEEJ,MAAOK,EAAOE,QACdR,WAAW,IAGf,QACE,OAAOK,MCrBPP,EAAeI,EAAW,GAAI,I,4CCAnBO,GAAV,SAAUA,EAAaD,GAAvB,uEAEc,OAFd,kBAEoBE,iBAFpB,OAGH,OADMC,EAFH,gBAGGC,cAAI,CAAEL,KHRgB,yBGQQC,QAASG,IAH1C,8BAKH,OALG,mCAKGC,cAAI,CAAEL,KHTa,uBGSQC,QAAQ,EAAD,KALrC,qDAQA,IAAMK,EAAeC,oBAAUjB,EAAUY,G,WCbvBM,GAAV,SAAUA,IAAV,iEACb,OADa,SACPF,EADO,uC,YCGTG,EAAc1B,EAAW2B,oBACzBC,EAAiBC,YAAqB,CAAEH,gBAExCI,EAAmBC,8BAAoB,IAGvCC,EAAQC,uBHFC,SAAClB,EAAOC,GAKrB,MFfmB,mBEWfA,EAAOC,OACTF,EAAQP,GAGHI,EAAWG,EAAOC,KGDzB,GACAc,EAAiBI,0BAAgBN,GAAiB5B,EAAWmC,mBAE/DP,EAAeQ,IAAIX,GAEJO,Q,2FCjBMK,E,iLAEjB,OACE,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAAMC,IAAeC,UAC9BC,SAAU,kBAACC,EAAA,EAAD,CAAMD,SAAS,kB,GALOE,aCAnBC,E,iLAEjB,OACE,kBAACP,EAAA,EAAD,CACEC,QAAS,kBAAMC,IAAeM,WAAW,UACzCJ,SAAU,kBAACC,EAAA,EAAD,CAAMD,SAAS,6B,GALOE,aCG3BG,EAAb,iLAEI,OACE,kBAAC,IAAD,CAAeC,IAAKC,cAClB,kBAAC,IAAD,CAAOC,KAAK,iBAAiBC,OAAK,EAACC,UAAWP,IAC9C,kBAAC,IAAD,CAAOK,KAAK,QAAQC,OAAK,EAACC,UAAWf,SAL7C,GAAkCO,aAenBtC,eAJS,SAACS,GAAD,MAAY,KAET,GAEZT,CAA6CyC,GCR7CM,MARf,WACE,OACE,kBAAC,IAAD,CAAUrB,MAAOA,GACf,kBAAC,EAAD,QCIcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACL2D,QAAQ3D,MAAMA,EAAM4D,a,iBEzI5B,IAAIC,EACEC,EAAa,kBAAMD,GACzBE,EAAOC,QAAU,CACf1B,WAAY,SAACD,GACXwB,EAAWxB,EAAI4B,SAEjB9B,WAAY,SAAC+B,GACXJ,IAAaK,KAAKD,IAEpBpC,OAAQ,WACNgC,IAAahC,Y","file":"static/js/main.b06fa66c.chunk.js","sourcesContent":["import Reactotron from \"reactotron-react-js\";\r\nimport { reactotronRedux } from \"reactotron-redux\";\r\nimport sagaPlugin from \"reactotron-redux-saga\";\r\nconst reactotron = Reactotron.configure({ name: \"React JS\" })\r\n  .use(reactotronRedux())\r\n  .use(sagaPlugin())\r\n  .connect();\r\n\r\nexport default reactotron;\r\n","//user\r\nexport const RESET = 'windsoft/reset';\r\n\r\nexport const GET_USER = 'windsoft/getUser';\r\nexport const GET_USER_SUCCESS = 'windsoft/getUserSucces';\r\nexport const GET_USER_FAIL = 'windsoft/getUserFail';","import { GET_USER, GET_USER_SUCCESS, GET_USER_FAIL } from \"../actions/type\";\r\n\r\nconst initialState = {\r\n  data: {},\r\n  isLoading: true,\r\n  error: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_USER: {\r\n      return { ...state, isLoading: true };\r\n    }\r\n    case GET_USER_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: null,\r\n        data: action.payload\r\n      };\r\n    }\r\n    case GET_USER_FAIL: {\r\n     \r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isLoading: false,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport UserReducer from \"./UserReducer\";\r\nimport { RESET } from \"../actions/type\";\r\n\r\n\r\nlet appReducer= combineReducers({\r\n  userReducer: UserReducer,\r\n});\r\n\r\nconst initialState = appReducer({}, {})\r\n\r\nexport default (state, action) => {\r\n  if (action.type === RESET) {\r\n    state = initialState\r\n  }\r\n\r\n  return appReducer(state, action)\r\n}\r\n","import { put, takeEvery, call } from \"redux-saga/effects\";\r\nimport {\r\n  GET_USER,\r\n  GET_USER_SUCCESS,\r\n  GET_USER_FAIL,\r\n} from \"../actions/type\";\r\n\r\n// import * as API from \"../../constants/Api\";\r\n\r\nexport function* getUserInfor(payload) {\r\n  try {\r\n    const response = yield call();\r\n    yield put({ type: GET_USER_SUCCESS, payload: response });\r\n  } catch (err) {\r\n    yield put({ type: GET_USER_FAIL, payload: err });\r\n  }\r\n}\r\nexport const watchGetUser = takeEvery(GET_USER, getUserInfor);\r\n\r\n","import {\r\n  watchGetUser,\r\n} from \"./NetworkSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield watchGetUser;\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducers from \"../reducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../sagas\";\r\nimport Reactotron from \"../../ReactotronConfig\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst sagaMonitor = Reactotron.createSagaMonitor();\r\nconst sagaMiddleware = createSagaMiddleware({ sagaMonitor });\r\n\r\nconst composeEnhancers = composeWithDevTools({\r\n  // Specify here name, actionsBlacklist, actionsCreators and other options\r\n});\r\nconst store = createStore(\r\n  reducers,\r\n  {},\r\n  composeEnhancers(applyMiddleware(sagaMiddleware), Reactotron.createEnhancer())\r\n);\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport { Text, TouchableOpacity } from \"react-native\";\r\nimport NavigationUtil from \"../navigation/NavigationUtil\";\r\nexport default class UserScreen extends Component {\r\n  render() {\r\n    return (\r\n      <TouchableOpacity\r\n        onPress={() => NavigationUtil.goBack()}\r\n        children={<Text children=\"quay ve\" />}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Text, TouchableOpacity } from \"react-native\";\r\nimport NavigationUtil from \"../navigation/NavigationUtil\";\r\nexport default class HomeScreen extends Component {\r\n  render() {\r\n    return (\r\n      <TouchableOpacity\r\n        onPress={() => NavigationUtil.navigation(\"/user\")}\r\n        children={<Text children=\"dm quoc anh an Lon\" />}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport UserScreen from \"../screens/UserScreen\";\r\nimport HomeScreen from \"../screens/HomeScreen\";\r\nimport { setHistory } from \"../navigation/NavigationUtil\";\r\nexport class AppNavigator extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter ref={setHistory}>\r\n        <Route path=\"/react_js_base\" exact component={HomeScreen} />\r\n        <Route path=\"/user\" exact component={UserScreen} />\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppNavigator);\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport AppNavigator from \"./navigation/AppNavigator\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <AppNavigator />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"./ReactotronConfig\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","let _history;\nconst getHistory = () => _history;\nmodule.exports = {\n  setHistory: (ref) => {\n    _history = ref.history;\n  },\n  navigation: (route) => {\n    getHistory().push(route);\n  },\n  goBack: () => {\n    getHistory().goBack();\n  },\n};\n"],"sourceRoot":""}